generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  refresh_token_expires_in Int?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                   String            @id @default(cuid())
  name                 String?
  email                String?           @unique
  emailVerified        DateTime?
  image                String?
  password             String?
  createdAt            DateTime          @default(now())
  updatedAt            DateTime          @updatedAt
  accounts             Account[]
  agentSessions        AgentSession[]
  sessions             Session[]
  ownedWorkspaces      Workspace[]       @relation("WorkspaceOwner")
  invitedMembers       WorkspaceMember[] @relation("InvitedBy")
  workspaceMemberships WorkspaceMember[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Workspace {
  id            String            @id @default(cuid())
  name          String
  description   String?
  path          String            @unique
  teacherGroup  String            @default("")
  studentGroup  String            @default("")
  ownerId       String
  status        String            @default("active")
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  agentSessions AgentSession[]
  owner         User              @relation("WorkspaceOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  members       WorkspaceMember[]
}

model WorkspaceMember {
  id          String    @id @default(cuid())
  workspaceId String
  userId      String
  role        String    @default("student")
  joinedAt    DateTime  @default(now())
  invitedBy   String?
  inviter     User?     @relation("InvitedBy", fields: [invitedBy], references: [id])
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@unique([workspaceId, userId])
}

model AgentSession {
  sessionId   String    @id
  workspaceId String
  userId      String
  title       String
  messages    Json
  bullJobId   String?   @unique
  lastQuery   String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@index([workspaceId, userId])
  @@index([createdAt])
  @@index([bullJobId])
}
